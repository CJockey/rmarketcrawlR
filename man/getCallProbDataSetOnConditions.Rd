% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocessData.R
\name{getCallProbDataSetOnConditions}
\alias{getCallProbDataSetOnConditions}
\title{getCallProbDataSetOnConditions}
\usage{
getCallProbDataSetOnConditions(data, numCores, price.seq.start, price.seq.end,
  granularity, conditionByColumns)
}
\arguments{
\item{data}{- the data.frame with the calculated marginal workprices from the approximated 1min calls (@seealso getMarginalWorkPrices)}

\item{numCores}{- set the number of cores to be used for parallel computation}

\item{price.seq.start}{- specifies the start price of a price range for which call probabilities should be calculated}

\item{price.seq.end}{- specifies the end price of a price range for which call probabilities should be calculated}

\item{granularity}{- a factor which specifies the steps of the price range. E.g. a factor of 0.1 leads to decimal incrementions (0, 0.1, 0.2, ..., 1.5, 1.6, 1.7...)}

\item{conditionByColumns}{- an array of columns/variables of the input data.frame. They condition the porbability calculation. Therefore they have to be factors or at least factorizable. IMPORTANT: !! The variable Direction has to be in it, since for probability calculation the total number (numerator) depends on POS and NEG power (It makes sense to keep Tarif and Direction which define the product type)}
}
\value{
an array with all the call probabilities of the specified timeperiod and price range.
}
\description{
This functions calculates for each price within a given price range the call probability conditioned by specified columns of the input data.frame (e.g. Tarif and Direction). Hereby, the Direction variable is mandatory to correctly calculate the call probability.
The conditioned variables have to be calculated before and must be factors or at least factorizable.
}
\examples{
needs <- getOperatingReserveNeeds('01.01.2016', '10.01.2016')
calls <- getOperatingReserveCalls('01.01.2016', '10.01.2016', '6', 'SRL')
auctions <- getOperatingReserveAuctions('28.12.2015', '10.01.2016', '2')

mwork.parallel <- getMarginalWorkPrices(needs,calls,auctions,2)
call.probs <- getCallProbDataSet(mwork.parallel, 1, 0, 775, "2016-01-01 00:00:00", "2016-01-01 23:59:59", c("NT", "POS"))

# Plot the call probabilities. Therefore create an array with the price range
library(ggplot2)
price.range <- seq(0, ceiling(max.mwork))
qplot(price.range, call.probs, geom="line")


}
